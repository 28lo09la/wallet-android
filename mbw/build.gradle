apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

repositories {
    google()
    mavenLocal()
    jcenter()
}

buildscript {
    repositories {
        google()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath androidBuildArtifact
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

configurations {
    compile.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}

dependencies {
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "com.android.support:support-annotations:$androidSupportVersion"
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test:rules:0.5'

    implementation project(includePrefix + ':libs:zxing-android')
    implementation project(includePrefix + ':coinapult')
    implementation project(includePrefix + ':wapi')
    implementation project(includePrefix + ':trezor')
    implementation project(includePrefix + ':lt-api')
    implementation project(includePrefix + ':mbwlib')
    implementation project(includePrefix + ':btchip')
    implementation project(includePrefix + ':LVL')

    implementation guavaArtifact
    implementation 'com.squareup:otto:1.3.4'
    // TODO: upgrade this! and remove the exclude support-v4 below
    implementation "com.android.support:appcompat-v7:$androidSupportVersion"
    implementation "com.android.support:support-v4:$androidSupportVersion"
    implementation "com.android.support:animated-vector-drawable:$androidSupportVersion"
    implementation "com.android.support:recyclerview-v7:$androidSupportVersion"
    //not upgrading. This will be removed from the core app
    implementation('com.google.android.gms:play-services-base:9.0.2') {
        exclude module: 'support-v4'
    }
    implementation('com.google.android.gms:play-services-gcm:9.0.2') {
        exclude module: 'support-v4'
    }
    implementation 'org.bitcoinj:bitcoinj-core:0.15-SNAPSHOT'
    implementation 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'
    implementation 'com.squareup.retrofit:retrofit:1.9.0'

    implementation 'com.jakewharton:butterknife:8.5.1'
    kapt 'com.jakewharton:butterknife-compiler:8.5.1'

    implementation 'io.reactivex:rxandroid:1.1.0'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.android.support:multidex:1.0.1'
    implementation('com.google.code.findbugs:annotations:3.0.1') {
        exclude module: 'jsr305'
    }
    implementation project(includePrefix + ':myceliummodularizationtools')
    implementation project(includePrefix + ':spvmodulecontract')
    implementation 'commons-codec:commons-codec:1.5'
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version") {
        exclude(group: 'org.jetbrains', module: 'annotations')
    }
    implementation 'com.github.tony19:logback-android-core:1.1.1-6'
}

android {
    configurations {
        all*.exclude module: 'jcip-annotations'
        all*.exclude module: 'jsr305'
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        // bitcoinj brings in a native library for x86_64, which seems to confuse the playstore upload - just strip the file
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
    }

    compileOptions {
        sourceCompatibility = 'VERSION_1_7'
        targetCompatibility = 'VERSION_1_7'
    }

    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidSdkBuildVersion

    defaultConfig {
        versionCode 300100
        versionName '3.0.0'
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias = ''
        }
        btctestnet {
            keyAlias = ''
        }
        commonDebug {
            storeFile commonDebugKeystore
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            // minifyEnabled !project.hasProperty('skipProguard')
            proguardFiles {
                getDefaultProguardFile('proguard-android.txt')
                'mbw.pro'
            }
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def file = output.outputFile
                    if (file != null && file.name.endsWith('.apk')) {
                        def versionExtension = "-" + defaultConfig.versionName + "build" + defaultConfig.versionCode + ".apk"
                        //output.outputFile = new File(file.parent, file.name.replace(".apk", versionExtension))
                    }
                }
            }
        }
        debug {
            debuggable true
        }
    }
    flavorDimensions "flavor"

    productFlavors {
        prodnet {
            targetSdkVersion 23
            minSdkVersion 19

            applicationId 'com.mycelium.wallet'
            versionName = defaultConfig.versionName
            signingConfig signingConfigs.release

            ext {
                MTAssetID = "LaA8aiRBha2BcC6PCqMuK8xzZqdA3Lb6VVv41K"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La4aGUPuNKZyC393pS2Nb4RJdk2WvmoaAdrRLZ"
                RMCApiClientURL = "https://rmc-ico.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"https://coloredcoinsd.gear.mycelium.com/v3/", "https://api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"https://coloredcoins.gear.mycelium.com/api/", "https://explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "18c91fJmVg7btPjxpwrhgwd37GkVghq9me"
            }
        }
        dev {
            buildToolsVersion androidSdkBuildVersion
            minSdkVersion 21

            // if we are not on master, include the branchname in versionName
            def branch = getGitBranch()

            if (branch != "" && branch != "master") {
                versionName = defaultConfig.versionName + "-DEV_" + branch
            }

            applicationId 'com.mycelium.devwallet_spore'
            signingConfig signingConfigs.debug

            ext {
                MTAssetID = "La3JCiNMGmc74rcfYiBAyTUstFgmGDRDkGGCRM"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La8yFVyKmHGf4KWjcPqATZeTrSxXyzB3JRPxDc"
                RMCApiClientURL = "https://rmc-ico-test.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"http://testnet.api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"http://testnet.explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "mx92L6iuCfxQUz4cLNU4jJpfWbavVHgYj9"
            }
        }
        devprod {
            buildToolsVersion androidSdkBuildVersion
            minSdkVersion 21

            applicationId 'com.mycelium.devprodwallet'
            signingConfig signingConfigs.debug

            ext {
                MTAssetID = "LaA8aiRBha2BcC6PCqMuK8xzZqdA3Lb6VVv41K"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La3bgndN7QSYqV8pWuuqbfBPyHMZRK14Tb2BPg"
                RMCApiClientURL = "https://rmc-ico-stg.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"https://coloredcoinsd.gear.mycelium.com/v3/", "https://api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"https://coloredcoins.gear.mycelium.com/api/", "https://explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "18c91fJmVg7btPjxpwrhgwd37GkVghq9me"
            }
        }
        btctestnet {
            targetSdkVersion 23
            minSdkVersion 19

            applicationId 'com.mycelium.testnetwallet'
            versionName = defaultConfig.versionName + '-TESTNET'
            signingConfig signingConfigs.btctestnet

            ext {
                MTAssetID = "La3JCiNMGmc74rcfYiBAyTUstFgmGDRDkGGCRM"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La8yFVyKmHGf4KWjcPqATZeTrSxXyzB3JRPxDc"
                RMCApiClientURL = "https://rmc-ico-test.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"http://testnet.api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"http://testnet.explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "mx92L6iuCfxQUz4cLNU4jJpfWbavVHgYj9"
            }
        }
    }

    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        variant.buildConfigField "String", "MTAssetID", "\"${flavor.ext.MTAssetID}\""
        variant.buildConfigField "String", "MassAssetID", "\"${flavor.ext.MassAssetID}\""
        variant.buildConfigField "String", "RMCAssetID", "\"${flavor.ext.RMCAssetID}\""
        variant.buildConfigField "String", "RMCApiClientURL", "\"${flavor.ext.RMCApiClientURL}\""
        variant.buildConfigField "String[]", "ColoredCoinsApiURLs", "${flavor.ext.ColoredCoinsApiURLs}"
        variant.buildConfigField "String[]", "ColuBlockExplorerApiURLs", "${flavor.ext.ColuBlockExplorerApiURLs}"
        variant.buildConfigField "String", "RMCChangeAddress", "\"${flavor.ext.RMCChangeAddress}\""
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

// use the keystore file from the local repository, so that we share the same
// signatures while developing
if (commonDebugKeystore.exists()) {
    android.buildTypes.debug.signingConfig = android.signingConfigs.commonDebug
    android.productFlavors.dev.signingConfig = android.signingConfigs.commonDebug
    logger.info("Using common debug.keystore " + commonDebugKeystore)
}

if (project.hasProperty('prodKeyStore') &&
        project.hasProperty('prodKeyAlias') &&
        project.hasProperty('prodKeyStorePassword') &&
        project.hasProperty('prodKeyAliasPassword')) {
    android.signingConfigs.release.storeFile = file('../../' + prodKeyStore)
    android.signingConfigs.release.keyAlias = prodKeyAlias
    android.signingConfigs.release.storePassword = prodKeyStorePassword
    android.signingConfigs.release.keyPassword = prodKeyAliasPassword
} else {
    android.productFlavors.prodnet.signingConfig = null
}

if (project.hasProperty('testKeyStore') &&
        project.hasProperty('testKeyAlias') &&
        project.hasProperty('testKeyStorePassword') &&
        project.hasProperty('testKeyAliasPassword')) {
    android.signingConfigs.btctestnet.storeFile = file('../../' + testKeyStore)
    android.signingConfigs.btctestnet.keyAlias = testKeyAlias
    android.signingConfigs.btctestnet.storePassword = testKeyStorePassword
    android.signingConfigs.btctestnet.keyPassword = testKeyAliasPassword
} else {
    android.productFlavors.btctestnet.signingConfig = null
}
